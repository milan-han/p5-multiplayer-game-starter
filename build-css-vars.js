#!/usr/bin/env node

/**
 * Build script to generate CSS custom properties from YAML configuration
 * This script reads the blueprint-battle.yaml configuration and generates
 * a style-vars.css file with CSS custom properties for styling values
 */

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');

// Paths
const yamlPath = path.join(__dirname, 'spec', 'blueprint-battle.yaml');
const outputPath = path.join(__dirname, 'public', 'style-vars.css');

function generateCSSVariables() {
    try {
        // Read and parse YAML configuration
        const yamlContent = fs.readFileSync(yamlPath, 'utf8');
        const config = yaml.load(yamlContent);
        
        // Check if CSS generation is enabled
        if (!config.css_overrides || !config.css_overrides.generate_css_vars) {
            console.log('CSS variable generation is disabled in configuration');
            return;
        }
        
        // Generate CSS custom properties
        let cssContent = `/* 
 * Auto-generated CSS custom properties from blueprint-battle.yaml
 * DO NOT EDIT THIS FILE DIRECTLY - it will be overwritten
 * To modify these values, edit spec/blueprint-battle.yaml and run: npm run build:css
 */

:root {
    /* Colors */
    --color-base: ${config.colors.base};
    --color-primary-stroke: ${config.colors.primary_stroke};
    --color-dim-stroke: ${config.colors.dim_stroke};
    --color-glow-accent: ${config.colors.glow_accent};
    --color-error-accent: ${config.colors.error_accent};
    --color-white: ${config.colors.white};
    --color-css-background: ${config.colors.css_background};
    --color-css-text: ${config.colors.css_text};
    
    /* Typography */
    --font-primary: ${config.typography.primary_font};
    --font-size-ui: ${config.typography.ui_font_size}px;
    --font-weight-ui: ${config.typography.ui_font_weight};
    
    /* UI Layout */
    --ui-position-top: ${config.ui.hud_position.top}px;
    --ui-position-left: ${config.ui.hud_position.left}px;
    
    /* CSS Override values */
`;

        // Add CSS override values if they exist
        if (config.css_overrides) {
            Object.entries(config.css_overrides).forEach(([key, value]) => {
                if (key !== 'generate_css_vars' && typeof value === 'string') {
                    const cssVarName = `--${key.replace(/_/g, '-')}`;
                    cssContent += `    ${cssVarName}: ${value};\n`;
                }
            });
        }
        
        cssContent += `}
`;
        
        // Write CSS file
        fs.writeFileSync(outputPath, cssContent);
        console.log(`Generated CSS variables file: ${outputPath}`);
        
    } catch (error) {
        console.error('Error generating CSS variables:', error);
        process.exit(1);
    }
}

// Run the generator
generateCSSVariables();